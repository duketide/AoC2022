import MyUtils
import Data.List
import Data.List.Split (splitOn)
import qualified Data.Map as M

resolve :: Maybe a -> a 
resolve (Just x) = x
resolve Nothing = error "You've committed a grave error. Stop trying."

create3s :: [String] -> [[String]]
create3s [] = []
create3s myList = take 3 myList : create3s (drop 3 myList)

main = do
  rawInput <- readFile "day3.txt"
  let sacks = lines rawInput
  let comps = map (\x -> let half = length x `div` 2 in [take half x, take half $ reverse x]) sacks
  let theItems = map (\x -> nub $ intersect (head x) (last x)) comps
  let alphabet = map (: []) $ take 52 $ ['a'..'z'] ++ ['A' .. 'z']
  let myMap = M.fromList $ zip alphabet [1..]
  let solution1 = sum $ map (\x -> resolve $ M.lookup x myMap) theItems 
  print solution1
  let input2 = create3s sacks 
  let badges = map (\(w:x:y:zs) -> (w `intersect` x) `intersect` y) input2
  let solution2 = input2
  print solution2
